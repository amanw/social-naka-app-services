swagger: "2.0"
info:
  description: HTTP server in Go with Swagger endpoints definition
  title: social-naka-app
  version: 0.0.1
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
securityDefinitions:
  APIKeyHeader:
    type: apiKey
    in: header
    name: X-API-Key
    
# security:
#   - APIKeyHeader: []

paths:
  /registerUser:
    post:
      summary: Registers the User
      description: >
        It registers the User
      operationId: registerUser
      tags:
        - users
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: User Body
          in: body
          schema:
            $ref: "#/definitions/user"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/user"
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/UserExists'
        500:
          $ref: '#/responses/InternalServerError'

  /users:
    get:
      summary: Get all the Users
      description: >
        It gets all the Users
      operationId: getUsers
      tags:
        - users
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema: 
            type: array
            items: 
              $ref: '#/definitions/user'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError' 

  /users/{id}:
    get:
      # security:
      #  - APIKeyHeader: []
      summary: Gets a user by ID.
      description: >
        It gets the user information details by ID
      operationId: getUserbyID
      tags:
        - users
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User ID
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/user'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
    
    patch:
      summary: Updates a user by ID.
      description: >
        It updates the user information details by ID
      operationId: updateUserbyID
      tags:
        - users
      produces:
        - application/json
      parameters: 
        - in: path
          name: id
          description: User ID
          type: string
          required: true
        - in: body
          name: User Body
          schema:
            $ref: "#/definitions/user"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/user'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/UserExists'
        500:
          $ref: '#/responses/InternalServerError'
    
    delete:
      summary: Deletes a user by ID.
      description: >
        It delets the user information details by ID
      operationId: deleteUserbyID
      tags:
        - users
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User ID
          type: string
          required: true
      responses:
        200:
          $ref: '#/responses/Status'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'

definitions:
  user:
    type: object
    properties:
      id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email_address:
        type: string
      mobile_no:
        type: string
      dob:
        type: string
        format: date
      sex:
        type: string
      username:
        type: string
      password:
        type: string
      location:
        type: string
      description:
        type: string
      is_active:
        type: boolean
      is_staying_here:
        type: boolean
      created_at:
        type: string
      updated_at:
        type: string
      role_name:
        type: string
      
    required:
      - id
      - first_name
      - last_name
      - email_address
      - mobile_no
      - dob
      - sex
      - username
      - password
      - location

  error:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string

responses:
  Status:
    description: "API Custom Status"
    schema:
      $ref: "#/definitions/error"
  UnauthorizedError:
    description: "The api is Unauthorized"
    schema:
      $ref: "#/definitions/error"
  BadRequest:
    description: "The api is Unauthorized"
    schema:
      $ref: "#/definitions/error"
  NotFound:
    description: "The api is not found"
    schema:
      $ref: "#/definitions/error"
  UserExists:
    description: "The user already exists"
    schema:
      $ref: "#/definitions/error"
  InternalServerError:
    description: "Internal Server Error"
    schema:
      $ref: "#/definitions/error"
  


