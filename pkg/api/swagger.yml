swagger: "2.0"
info:
  description: HTTP server in Go with Swagger endpoints definition
  title: social-naka-app
  version: 0.0.1
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
securityDefinitions:
  APIKeyHeader:
    type: apiKey
    in: header
    name: X-API-Key
    
# security:
#   - APIKeyHeader: []

paths:
  /registerUser:
    post:
      summary: Registers the User
      description: >
        It registers the User
      operationId: registerUser
      tags:
        - users
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: User Body
          in: body
          schema:
            $ref: "#/definitions/user"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/registrationResponse"
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/UserExists'
        500:
          $ref: '#/responses/InternalServerError'

  /users:
    get:
      summary: Get all the Users
      description: >
        It gets all the Users
      operationId: getUsers
      tags:
        - users
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:  
            $ref: '#/definitions/userResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError' 

  /users/{id}:
    get:
      # security:
      #  - APIKeyHeader: []
      summary: Gets a user by ID.
      description: >
        It gets the user information details by ID
      operationId: getUserbyID
      tags:
        - users
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User ID
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/registrationResponse"
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
    
    patch:
      summary: Updates a user by ID.
      description: >
        It updates the user information details by ID
      operationId: updateUserbyID
      tags:
        - users
      produces:
        - application/json
      parameters: 
        - in: path
          name: id
          description: User ID
          type: string
          required: true
        - in: body
          name: User Body
          schema:
            $ref: "#/definitions/user"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/registrationResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/UserExists'
        500:
          $ref: '#/responses/InternalServerError'
    
    delete:
      summary: Deletes a user by ID.
      description: >
        It delets the user information details by ID
      operationId: deleteUserbyID
      tags:
        - users
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User ID
          type: string
          required: true
      responses:
        200:
          $ref: '#/responses/Status'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'

  /loginUser:
    post:
      summary: Logins the User
      description: >
        It logins the User
      operationId: loginUser
      tags:
        - login
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: Login Body
          in: body
          schema:
            $ref: "#/definitions/loginUser"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/responses/Status"
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'

#post the Event
  /postEvent:
    post:
      summary: Post the Event
      description: >
        It registers the Event
      operationId: postEvent
      tags:
        - events
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: Event Body
          in: body
          schema:
            $ref: "#/definitions/event"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/eventResponse"
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'

#gets all the events
  /events:
    get:
      summary: Get all the Events
      description: >
        It gets all the Events
      operationId: getEvents
      tags:
        - events
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:  
            $ref: '#/definitions/eventResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'

# read, update and delete for events
  /events/{id}:
    get:
      # security:
      #  - APIKeyHeader: []
      summary: Gets a event by ID.
      description: >
        It gets the event information details by ID
      operationId: getEventbyID
      tags:
        - events
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Event ID
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/eventResponse"
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
    
    patch:
      summary: Updates an event by ID.
      description: >
        It updates the user information details by ID
      operationId: updateEventbyID
      tags:
        - events
      produces:
        - application/json
      parameters: 
        - in: path
          name: id
          description: Event ID
          type: string
          required: true
        - in: body
          name: Event Body
          schema:
            $ref: "#/definitions/event"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/eventResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
    
    delete:
      summary: Deletes a event by ID.
      description: >
        It delets the event information details by ID
      operationId: deleteEventbyID
      tags:
        - events
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Event ID
          type: string
          required: true
      responses:
        200:
          $ref: '#/responses/Status'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'

definitions:
  loginUser:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password

  user:
    type: object
    properties:
      id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email_address:
        type: string
      mobile_no:
        type: string
      dob:
        type: string
        format: date
        x-nullable: true
      sex:
        type: string
      username:
        type: string
      password:
        type: string
      location:
        type: string
      house_name:
        type: string
      description:
        type: string
      is_active:
        type: boolean
      is_staying_here:
        type: boolean
      created_at:
        type: string
      updated_at:
        type: string
      role_name:
        type: string
  
  event:
    type: object
    properties:
      id:
        type: string
      event_name:
        type: string
      event_description:
        type: string
      event_date: 
        type: string
        format: date
        x-nullable: true
      event_location:
        type: string
      user_id:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
      approver_id:
        type: string
      is_active:
        type: boolean
      is_verified:
        type: boolean


  response:
    type: object
    properties:
      code:
        type: integer
      status:
        type: string
      message:
        type: string
  
  registrationResponse:
    type: object
    properties:
      response:
        $ref: "#/definitions/response"
      user:
        $ref: "#/definitions/user"
  
  eventResponse:
    type: object
    properties:
      response:
        $ref: "#/definitions/response"
      event:
        $ref: "#/definitions/event"
      events:
        type: array
        items:
          $ref: "#/definitions/event"

  
  userResponse:
    type: object
    properties:
      response:
        $ref: "#/definitions/response"
      users:
        type: array
        items: 
          $ref: '#/definitions/user'
      
responses:
  Status:
    description: "API Custom Status"
    schema:
      $ref: "#/definitions/response"
  UnauthorizedError:
    description: "The api is Unauthorized"
    schema:
      $ref: "#/definitions/response"
  BadRequest:
    description: "The api is Unauthorized"
    schema:
      $ref: "#/definitions/response"
  NotFound:
    description: "The api is not found"
    schema:
      $ref: "#/definitions/response"
  UserExists:
    description: "The user already exists"
    schema:
      $ref: "#/definitions/response"
  InternalServerError:
    description: "Internal Server Error"
    schema:
      $ref: "#/definitions/response"

  


