// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/amanw/social-naka-app-services/pkg/api/restapi/operations"
	"github.com/amanw/social-naka-app-services/pkg/api/restapi/operations/events"
	"github.com/amanw/social-naka-app-services/pkg/api/restapi/operations/login"
	"github.com/amanw/social-naka-app-services/pkg/api/restapi/operations/users"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name EventsAPI -inpkg

// EventsAPI
type EventsAPI interface {
	// DeleteEventbyID is It delets the event information details by ID

	DeleteEventbyID(ctx context.Context, params events.DeleteEventbyIDParams) middleware.Responder
	// GetEventbyID is It gets the event information details by ID

	GetEventbyID(ctx context.Context, params events.GetEventbyIDParams) middleware.Responder
	// GetEvents is It gets all the Events

	GetEvents(ctx context.Context, params events.GetEventsParams) middleware.Responder
	// PostEvent is It registers the Event

	PostEvent(ctx context.Context, params events.PostEventParams) middleware.Responder
	// UpdateEventbyID is It updates the user information details by ID

	UpdateEventbyID(ctx context.Context, params events.UpdateEventbyIDParams) middleware.Responder
}

//go:generate mockery -name LoginAPI -inpkg

// LoginAPI
type LoginAPI interface {
	// LoginUser is It logins the User

	LoginUser(ctx context.Context, params login.LoginUserParams) middleware.Responder
}

//go:generate mockery -name UsersAPI -inpkg

// UsersAPI
type UsersAPI interface {
	// DeleteUserbyID is It delets the user information details by ID

	DeleteUserbyID(ctx context.Context, params users.DeleteUserbyIDParams) middleware.Responder
	// GetUserbyID is It gets the user information details by ID

	GetUserbyID(ctx context.Context, params users.GetUserbyIDParams) middleware.Responder
	// GetUsers is It gets all the Users

	GetUsers(ctx context.Context, params users.GetUsersParams) middleware.Responder
	// RegisterUser is It registers the User

	RegisterUser(ctx context.Context, params users.RegisterUserParams) middleware.Responder
	// UpdateUserbyID is It updates the user information details by ID

	UpdateUserbyID(ctx context.Context, params users.UpdateUserbyIDParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	EventsAPI
	LoginAPI
	UsersAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *SocialNakaApp instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.SocialNakaAppAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewSocialNakaAppAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	api.JSONConsumer = runtime.JSONConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.EventsDeleteEventbyIDHandler = events.DeleteEventbyIDHandlerFunc(func(params events.DeleteEventbyIDParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.EventsAPI.DeleteEventbyID(ctx, params)
	})
	api.UsersDeleteUserbyIDHandler = users.DeleteUserbyIDHandlerFunc(func(params users.DeleteUserbyIDParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.UsersAPI.DeleteUserbyID(ctx, params)
	})
	api.EventsGetEventbyIDHandler = events.GetEventbyIDHandlerFunc(func(params events.GetEventbyIDParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.EventsAPI.GetEventbyID(ctx, params)
	})
	api.EventsGetEventsHandler = events.GetEventsHandlerFunc(func(params events.GetEventsParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.EventsAPI.GetEvents(ctx, params)
	})
	api.UsersGetUserbyIDHandler = users.GetUserbyIDHandlerFunc(func(params users.GetUserbyIDParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.UsersAPI.GetUserbyID(ctx, params)
	})
	api.UsersGetUsersHandler = users.GetUsersHandlerFunc(func(params users.GetUsersParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.UsersAPI.GetUsers(ctx, params)
	})
	api.LoginLoginUserHandler = login.LoginUserHandlerFunc(func(params login.LoginUserParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.LoginAPI.LoginUser(ctx, params)
	})
	api.EventsPostEventHandler = events.PostEventHandlerFunc(func(params events.PostEventParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.EventsAPI.PostEvent(ctx, params)
	})
	api.UsersRegisterUserHandler = users.RegisterUserHandlerFunc(func(params users.RegisterUserParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.UsersAPI.RegisterUser(ctx, params)
	})
	api.EventsUpdateEventbyIDHandler = events.UpdateEventbyIDHandlerFunc(func(params events.UpdateEventbyIDParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.EventsAPI.UpdateEventbyID(ctx, params)
	})
	api.UsersUpdateUserbyIDHandler = users.UpdateUserbyIDHandlerFunc(func(params users.UpdateUserbyIDParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.UsersAPI.UpdateUserbyID(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
