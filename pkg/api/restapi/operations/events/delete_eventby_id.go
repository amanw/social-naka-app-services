// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteEventbyIDHandlerFunc turns a function with the right signature into a delete eventby ID handler
type DeleteEventbyIDHandlerFunc func(DeleteEventbyIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteEventbyIDHandlerFunc) Handle(params DeleteEventbyIDParams) middleware.Responder {
	return fn(params)
}

// DeleteEventbyIDHandler interface for that can handle valid delete eventby ID params
type DeleteEventbyIDHandler interface {
	Handle(DeleteEventbyIDParams) middleware.Responder
}

// NewDeleteEventbyID creates a new http.Handler for the delete eventby ID operation
func NewDeleteEventbyID(ctx *middleware.Context, handler DeleteEventbyIDHandler) *DeleteEventbyID {
	return &DeleteEventbyID{Context: ctx, Handler: handler}
}

/*DeleteEventbyID swagger:route DELETE /events/{id} events deleteEventbyId

Deletes a event by ID.

It delets the event information details by ID


*/
type DeleteEventbyID struct {
	Context *middleware.Context
	Handler DeleteEventbyIDHandler
}

func (o *DeleteEventbyID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteEventbyIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
