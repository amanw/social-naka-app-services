// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/amanw/social-naka-app-services/pkg/api/models"
)

// GetUserbyIDOKCode is the HTTP code returned for type GetUserbyIDOK
const GetUserbyIDOKCode int = 200

/*GetUserbyIDOK OK

swagger:response getUserbyIdOK
*/
type GetUserbyIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewGetUserbyIDOK creates GetUserbyIDOK with default headers values
func NewGetUserbyIDOK() *GetUserbyIDOK {

	return &GetUserbyIDOK{}
}

// WithPayload adds the payload to the get userby Id o k response
func (o *GetUserbyIDOK) WithPayload(payload *models.User) *GetUserbyIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get userby Id o k response
func (o *GetUserbyIDOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserbyIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserbyIDBadRequestCode is the HTTP code returned for type GetUserbyIDBadRequest
const GetUserbyIDBadRequestCode int = 400

/*GetUserbyIDBadRequest The api is Unauthorized

swagger:response getUserbyIdBadRequest
*/
type GetUserbyIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserbyIDBadRequest creates GetUserbyIDBadRequest with default headers values
func NewGetUserbyIDBadRequest() *GetUserbyIDBadRequest {

	return &GetUserbyIDBadRequest{}
}

// WithPayload adds the payload to the get userby Id bad request response
func (o *GetUserbyIDBadRequest) WithPayload(payload *models.Error) *GetUserbyIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get userby Id bad request response
func (o *GetUserbyIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserbyIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserbyIDUnauthorizedCode is the HTTP code returned for type GetUserbyIDUnauthorized
const GetUserbyIDUnauthorizedCode int = 401

/*GetUserbyIDUnauthorized The api is Unauthorized

swagger:response getUserbyIdUnauthorized
*/
type GetUserbyIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserbyIDUnauthorized creates GetUserbyIDUnauthorized with default headers values
func NewGetUserbyIDUnauthorized() *GetUserbyIDUnauthorized {

	return &GetUserbyIDUnauthorized{}
}

// WithPayload adds the payload to the get userby Id unauthorized response
func (o *GetUserbyIDUnauthorized) WithPayload(payload *models.Error) *GetUserbyIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get userby Id unauthorized response
func (o *GetUserbyIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserbyIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserbyIDNotFoundCode is the HTTP code returned for type GetUserbyIDNotFound
const GetUserbyIDNotFoundCode int = 404

/*GetUserbyIDNotFound The api is not found

swagger:response getUserbyIdNotFound
*/
type GetUserbyIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserbyIDNotFound creates GetUserbyIDNotFound with default headers values
func NewGetUserbyIDNotFound() *GetUserbyIDNotFound {

	return &GetUserbyIDNotFound{}
}

// WithPayload adds the payload to the get userby Id not found response
func (o *GetUserbyIDNotFound) WithPayload(payload *models.Error) *GetUserbyIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get userby Id not found response
func (o *GetUserbyIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserbyIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserbyIDInternalServerErrorCode is the HTTP code returned for type GetUserbyIDInternalServerError
const GetUserbyIDInternalServerErrorCode int = 500

/*GetUserbyIDInternalServerError Internal Server Error

swagger:response getUserbyIdInternalServerError
*/
type GetUserbyIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserbyIDInternalServerError creates GetUserbyIDInternalServerError with default headers values
func NewGetUserbyIDInternalServerError() *GetUserbyIDInternalServerError {

	return &GetUserbyIDInternalServerError{}
}

// WithPayload adds the payload to the get userby Id internal server error response
func (o *GetUserbyIDInternalServerError) WithPayload(payload *models.Error) *GetUserbyIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get userby Id internal server error response
func (o *GetUserbyIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserbyIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
