// Code generated by go-swagger; DO NOT EDIT.

package posts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeletePostbyIDHandlerFunc turns a function with the right signature into a delete postby ID handler
type DeletePostbyIDHandlerFunc func(DeletePostbyIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePostbyIDHandlerFunc) Handle(params DeletePostbyIDParams) middleware.Responder {
	return fn(params)
}

// DeletePostbyIDHandler interface for that can handle valid delete postby ID params
type DeletePostbyIDHandler interface {
	Handle(DeletePostbyIDParams) middleware.Responder
}

// NewDeletePostbyID creates a new http.Handler for the delete postby ID operation
func NewDeletePostbyID(ctx *middleware.Context, handler DeletePostbyIDHandler) *DeletePostbyID {
	return &DeletePostbyID{Context: ctx, Handler: handler}
}

/*DeletePostbyID swagger:route DELETE /posts/{id} posts deletePostbyId

Deletes a post by ID.

It delets the post information details by ID


*/
type DeletePostbyID struct {
	Context *middleware.Context
	Handler DeletePostbyIDHandler
}

func (o *DeletePostbyID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeletePostbyIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
