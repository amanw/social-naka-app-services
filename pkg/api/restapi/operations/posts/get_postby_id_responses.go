// Code generated by go-swagger; DO NOT EDIT.

package posts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/amanw/social-naka-app-services/pkg/api/models"
)

// GetPostbyIDOKCode is the HTTP code returned for type GetPostbyIDOK
const GetPostbyIDOKCode int = 200

/*GetPostbyIDOK OK

swagger:response getPostbyIdOK
*/
type GetPostbyIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.PostResponse `json:"body,omitempty"`
}

// NewGetPostbyIDOK creates GetPostbyIDOK with default headers values
func NewGetPostbyIDOK() *GetPostbyIDOK {

	return &GetPostbyIDOK{}
}

// WithPayload adds the payload to the get postby Id o k response
func (o *GetPostbyIDOK) WithPayload(payload *models.PostResponse) *GetPostbyIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postby Id o k response
func (o *GetPostbyIDOK) SetPayload(payload *models.PostResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostbyIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPostbyIDBadRequestCode is the HTTP code returned for type GetPostbyIDBadRequest
const GetPostbyIDBadRequestCode int = 400

/*GetPostbyIDBadRequest The api is Unauthorized

swagger:response getPostbyIdBadRequest
*/
type GetPostbyIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetPostbyIDBadRequest creates GetPostbyIDBadRequest with default headers values
func NewGetPostbyIDBadRequest() *GetPostbyIDBadRequest {

	return &GetPostbyIDBadRequest{}
}

// WithPayload adds the payload to the get postby Id bad request response
func (o *GetPostbyIDBadRequest) WithPayload(payload *models.Response) *GetPostbyIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postby Id bad request response
func (o *GetPostbyIDBadRequest) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostbyIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPostbyIDUnauthorizedCode is the HTTP code returned for type GetPostbyIDUnauthorized
const GetPostbyIDUnauthorizedCode int = 401

/*GetPostbyIDUnauthorized The api is Unauthorized

swagger:response getPostbyIdUnauthorized
*/
type GetPostbyIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetPostbyIDUnauthorized creates GetPostbyIDUnauthorized with default headers values
func NewGetPostbyIDUnauthorized() *GetPostbyIDUnauthorized {

	return &GetPostbyIDUnauthorized{}
}

// WithPayload adds the payload to the get postby Id unauthorized response
func (o *GetPostbyIDUnauthorized) WithPayload(payload *models.Response) *GetPostbyIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postby Id unauthorized response
func (o *GetPostbyIDUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostbyIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPostbyIDNotFoundCode is the HTTP code returned for type GetPostbyIDNotFound
const GetPostbyIDNotFoundCode int = 404

/*GetPostbyIDNotFound The api is not found

swagger:response getPostbyIdNotFound
*/
type GetPostbyIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetPostbyIDNotFound creates GetPostbyIDNotFound with default headers values
func NewGetPostbyIDNotFound() *GetPostbyIDNotFound {

	return &GetPostbyIDNotFound{}
}

// WithPayload adds the payload to the get postby Id not found response
func (o *GetPostbyIDNotFound) WithPayload(payload *models.Response) *GetPostbyIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postby Id not found response
func (o *GetPostbyIDNotFound) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostbyIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPostbyIDInternalServerErrorCode is the HTTP code returned for type GetPostbyIDInternalServerError
const GetPostbyIDInternalServerErrorCode int = 500

/*GetPostbyIDInternalServerError Internal Server Error

swagger:response getPostbyIdInternalServerError
*/
type GetPostbyIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetPostbyIDInternalServerError creates GetPostbyIDInternalServerError with default headers values
func NewGetPostbyIDInternalServerError() *GetPostbyIDInternalServerError {

	return &GetPostbyIDInternalServerError{}
}

// WithPayload adds the payload to the get postby Id internal server error response
func (o *GetPostbyIDInternalServerError) WithPayload(payload *models.Response) *GetPostbyIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postby Id internal server error response
func (o *GetPostbyIDInternalServerError) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostbyIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
