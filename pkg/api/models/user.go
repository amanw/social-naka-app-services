// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model user
type User struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dob
	// Format: date
	Dob *strfmt.Date `json:"dob,omitempty"`

	// email address
	EmailAddress string `json:"email_address,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// house name
	HouseName string `json:"house_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`

	// is staying here
	IsStayingHere bool `json:"is_staying_here,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// mobile no
	MobileNo string `json:"mobile_no,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// role name
	RoleName string `json:"role_name,omitempty"`

	// sex
	Sex string `json:"sex,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDob(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateDob(formats strfmt.Registry) error {

	if swag.IsZero(m.Dob) { // not required
		return nil
	}

	if err := validate.FormatOf("dob", "body", "date", m.Dob.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
