// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event event
//
// swagger:model event
type Event struct {

	// approver id
	ApproverID string `json:"approver_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// event date
	// Format: date
	EventDate *strfmt.Date `json:"event_date,omitempty"`

	// event description
	EventDescription string `json:"event_description,omitempty"`

	// event location
	EventLocation string `json:"event_location,omitempty"`

	// event name
	EventName string `json:"event_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`

	// is verified
	IsVerified bool `json:"is_verified,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateEventDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EventDate) { // not required
		return nil
	}

	if err := validate.FormatOf("event_date", "body", "date", m.EventDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
